name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_ENV: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'development' }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          **/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
        
    - name: Run Frontend Tests with Coverage
      run: |
        cd frontend
        npm run test -- --coverage
        
    - name: Run Backend Tests with Coverage
      run: |
        cd backend
        npm run test -- --coverage

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          frontend/coverage
          backend/coverage

    - name: Run Linting and Type Checks
      run: |
        cd frontend && npm run lint && npm run type-check
        cd ../backend && npm run lint && npm run type-check

  security:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AutoLaunch'
        path: '.'
        format: 'HTML'

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: reports

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/autolaunch-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/autolaunch-frontend:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/autolaunch-frontend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/autolaunch-frontend:buildcache,mode=max
        
    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/autolaunch-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/autolaunch-backend:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/autolaunch-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/autolaunch-backend:buildcache,mode=max

  deploy-staging:
    needs: build
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to staging
      run: |
        aws eks update-kubeconfig --name staging-cluster
        kubectl apply -f k8s/staging/
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}

  deploy-production:
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to production
      run: |
        aws eks update-kubeconfig --name production-cluster
        kubectl apply -f k8s/production/
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}